# Generated by Django 5.0.13 on 2025-06-30 09:33

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('geolocation', '0004_delete_geocodingbatch_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='HDXHealthFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facility_name', models.CharField(db_index=True, max_length=200)),
                ('facility_type', models.CharField(blank=True, max_length=100)),
                ('ownership', models.CharField(blank=True, max_length=100)),
                ('ward', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('province', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('hdx_longitude', models.FloatField()),
                ('hdx_latitude', models.FloatField()),
                ('source', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'HDX Health Facility',
                'verbose_name_plural': 'HDX Health Facilities',
                'indexes': [models.Index(fields=['facility_name'], name='geolocation_facilit_84f3ce_idx'), models.Index(fields=['country', 'facility_name'], name='geolocation_country_ca91b2_idx'), models.Index(fields=['facility_type'], name='geolocation_facilit_b4ef19_idx'), models.Index(fields=['district', 'facility_name'], name='geolocation_distric_0e09c7_idx')],
                'unique_together': {('facility_name', 'country', 'district')},
            },
        ),
        migrations.CreateModel(
            name='ValidationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_score', models.FloatField(help_text='Overall confidence score (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('api_agreement_score', models.FloatField(blank=True, help_text='How well different APIs agree on coordinates', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reverse_geocoding_score', models.FloatField(blank=True, help_text='Reverse geocoding validation score', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recommended_lat', models.FloatField(blank=True, null=True)),
                ('recommended_lng', models.FloatField(blank=True, null=True)),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('validated', 'Validated'), ('needs_review', 'Needs Review'), ('rejected', 'Rejected'), ('manual_override', 'Manual Override')], default='pending', max_length=20)),
                ('validation_metadata', models.JSONField(blank=True, help_text='Additional validation data and API responses', null=True)),
                ('manual_review_notes', models.TextField(blank=True)),
                ('manual_lat', models.FloatField(blank=True, null=True)),
                ('manual_lng', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('geocoding_result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='validation', to='geolocation.geocodingresult')),
            ],
            options={
                'db_table': 'geolocation_validation_result',
                'ordering': ['-confidence_score', 'geocoding_result__location_name'],
            },
        ),
    ]
