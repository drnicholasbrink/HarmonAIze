# Generated by Django 5.0.13 on 2025-08-12 14:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClimateVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Variable name (e.g., 'temperature_2m')", max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable name', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the variable')),
                ('category', models.CharField(choices=[('temperature', 'Temperature'), ('precipitation', 'Precipitation'), ('humidity', 'Humidity'), ('wind', 'Wind'), ('solar', 'Solar Radiation'), ('vegetation', 'Vegetation Index'), ('air_quality', 'Air Quality'), ('extreme_events', 'Extreme Events'), ('other', 'Other')], max_length=50)),
                ('unit', models.CharField(help_text="Measurement unit (e.g., 'Â°C', 'mm', 'm/s')", max_length=50)),
                ('unit_symbol', models.CharField(help_text='Unit symbol for display', max_length=20)),
                ('min_value', models.FloatField(blank=True, help_text='Typical minimum value', null=True)),
                ('max_value', models.FloatField(blank=True, help_text='Typical maximum value', null=True)),
                ('supports_temporal_aggregation', models.BooleanField(default=True, help_text='Can this variable be aggregated over time?')),
                ('supports_spatial_aggregation', models.BooleanField(default=True, help_text='Can this variable be aggregated spatially?')),
                ('default_aggregation_method', models.CharField(choices=[('mean', 'Mean'), ('sum', 'Sum'), ('min', 'Minimum'), ('max', 'Maximum'), ('median', 'Median')], default='mean', max_length=20)),
                ('health_relevance', models.TextField(blank=True, help_text='Description of how this variable relates to health outcomes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Climate Variable',
                'verbose_name_plural': 'Climate Variables',
                'ordering': ['category', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='ClimateDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the climate data source', max_length=200, unique=True)),
                ('source_type', models.CharField(choices=[('gee', 'Google Earth Engine'), ('openweather', 'OpenWeather Climate'), ('era5', 'ERA5 Reanalysis'), ('worldclim', 'WorldClim'), ('chirps', 'CHIRPS Precipitation'), ('modis', 'MODIS Satellite'), ('custom', 'Custom API')], max_length=50)),
                ('description', models.TextField(help_text='Description of the data source and its capabilities')),
                ('api_endpoint', models.URLField(blank=True, help_text='Base API endpoint URL')),
                ('api_key', models.CharField(blank=True, help_text='API key or credentials (encrypted)', max_length=500)),
                ('requires_authentication', models.BooleanField(default=True)),
                ('spatial_resolution_m', models.FloatField(blank=True, help_text='Spatial resolution in metres', null=True)),
                ('temporal_resolution_days', models.FloatField(blank=True, help_text='Temporal resolution in days', null=True)),
                ('data_start_date', models.DateField(blank=True, help_text='Earliest available data', null=True)),
                ('data_end_date', models.DateField(blank=True, help_text='Latest available data', null=True)),
                ('global_coverage', models.BooleanField(default=True, help_text='Does this source provide global coverage?')),
                ('coverage_description', models.TextField(blank=True, help_text='Geographic coverage details')),
                ('is_active', models.BooleanField(default=True, help_text='Is this data source currently available?')),
                ('last_checked', models.DateTimeField(blank=True, help_text='Last availability check', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='climate_sources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Climate Data Source',
                'verbose_name_plural': 'Climate Data Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ClimateDataRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Start date for data retrieval')),
                ('end_date', models.DateField(help_text='End date for data retrieval')),
                ('temporal_aggregation', models.CharField(choices=[('none', 'None (raw data)'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('seasonal', 'Seasonal'), ('annual', 'Annual')], default='none', max_length=20)),
                ('spatial_buffer_km', models.FloatField(default=0, help_text='Buffer radius around point locations in kilometres', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error details if request failed')),
                ('total_locations', models.IntegerField(default=0, help_text='Total number of locations to process')),
                ('processed_locations', models.IntegerField(default=0, help_text='Number of locations processed')),
                ('total_observations', models.IntegerField(default=0, help_text='Total observations created')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('configuration', models.JSONField(blank=True, default=dict, help_text='Additional configuration parameters')),
                ('locations', models.ManyToManyField(help_text='Locations to retrieve data for', to='core.location')),
                ('requested_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('study', models.ForeignKey(help_text='Study requesting climate data', on_delete=django.db.models.deletion.CASCADE, related_name='climate_requests', to='core.study')),
                ('data_source', models.ForeignKey(help_text='Climate data source to use', null=True, on_delete=django.db.models.deletion.SET_NULL, to='climate.climatedatasource')),
                ('variables', models.ManyToManyField(help_text='Climate variables to retrieve', to='climate.climatevariable')),
            ],
            options={
                'verbose_name': 'Climate Data Request',
                'verbose_name_plural': 'Climate Data Requests',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='ClimateVariableMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_variable_name', models.CharField(help_text='Variable name in the source system', max_length=200)),
                ('source_dataset', models.CharField(blank=True, help_text='Dataset or collection name in the source', max_length=200)),
                ('source_band', models.CharField(blank=True, help_text='Band name for multi-band datasets', max_length=100)),
                ('scale_factor', models.FloatField(default=1.0, help_text='Multiplication factor to convert to standard units')),
                ('offset', models.FloatField(default=0.0, help_text='Offset to add after scaling')),
                ('extra_parameters', models.JSONField(blank=True, default=dict, help_text='Source-specific parameters as JSON')),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.climatedatasource')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.climatevariable')),
            ],
            options={
                'verbose_name': 'Variable Mapping',
                'verbose_name_plural': 'Variable Mappings',
                'unique_together': {('variable', 'data_source')},
            },
        ),
        migrations.AddField(
            model_name='climatevariable',
            name='data_sources',
            field=models.ManyToManyField(help_text='Data sources that provide this variable', related_name='variables', through='climate.ClimateVariableMapping', to='climate.climatedatasource'),
        ),
        migrations.CreateModel(
            name='ClimateDataCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('value', models.FloatField()),
                ('quality_flag', models.CharField(blank=True, help_text='Data quality indicator', max_length=20)),
                ('cached_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this cache entry expires')),
                ('hit_count', models.IntegerField(default=0, help_text='Number of times this cache entry was used')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.location')),
                ('data_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.climatedatasource')),
                ('variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='climate.climatevariable')),
            ],
            options={
                'verbose_name': 'Climate Data Cache',
                'verbose_name_plural': 'Climate Data Cache Entries',
                'indexes': [models.Index(fields=['expires_at'], name='climate_cli_expires_7a52fa_idx'), models.Index(fields=['location', 'date'], name='climate_cli_locatio_e0db7d_idx')],
                'unique_together': {('data_source', 'variable', 'location', 'date')},
            },
        ),
    ]
