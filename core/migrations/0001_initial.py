# Generated by Django 5.0.13 on 2025-07-12 17:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Place name (clinic, city, etc.)', max_length=200)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude in decimal degrees (-90 to 90).', null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(blank=True, help_text='Longitude in decimal degrees (-180 to 180).', null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(help_text='Unique identifier.', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeDimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable_name', models.CharField(max_length=200)),
                ('display_name', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('ontology_code', models.CharField(blank=True, max_length=100)),
                ('variable_type', models.CharField(choices=[('float', 'Float'), ('int', 'Integer'), ('string', 'String'), ('categorical', 'Categorical'), ('boolean', 'Boolean'), ('datetime', 'Datetime')], max_length=50)),
                ('category', models.CharField(choices=[('health', 'Health'), ('climate', 'Climate'), ('geolocation', 'Geolocation')], max_length=100)),
                ('source_type', models.CharField(choices=[('source', 'Source'), ('target', 'Target')], default='source', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('variable_name', 'source_type')},
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the project', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the project')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the study', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the study')),
                ('principal_investigator', models.CharField(blank=True, help_text='Principal investigator name', max_length=200)),
                ('study_purpose', models.CharField(choices=[('source', 'Source Study'), ('target', 'Target Study')], default='source', help_text='Whether this is a source study (data to harmonise) or target study (harmonisation target)', max_length=10)),
                ('study_type', models.CharField(choices=[('clinical_trial', 'Clinical Trial'), ('cohort', 'Cohort Study'), ('registry', 'Registry'), ('cross_sectional', 'Cross-sectional Study'), ('case_control', 'Case-Control Study'), ('other', 'Other')], help_text='Type of research study', max_length=50)),
                ('has_ethical_approval', models.BooleanField(default=False, help_text='Does this study have ethical/IRB approval?')),
                ('data_use_permissions', models.JSONField(blank=True, default=list, help_text='Data use permissions based on Data Use Ontology')),
                ('ethics_approval_number', models.CharField(blank=True, help_text='Ethics committee/IRB approval number', max_length=100)),
                ('has_dates', models.BooleanField(default=False, help_text='Does the study include date/time variables?')),
                ('has_locations', models.BooleanField(default=False, help_text='Does the study include location data?')),
                ('needs_geolocation', models.BooleanField(default=False, help_text='Do you need to geolocate addresses/facilities?')),
                ('needs_climate_linkage', models.BooleanField(default=False, help_text='Do you want to link climate data?')),
                ('codebook', models.FileField(blank=True, help_text='Upload your codebook (CSV, Excel, SPSS, Stata, JSON, DB, etc.)', null=True, upload_to='studies/codebooks/')),
                ('codebook_format', models.CharField(blank=True, help_text='Auto-detected format of the codebook file', max_length=20)),
                ('protocol_file', models.FileField(blank=True, help_text='Upload study protocol or additional documentation', null=True, upload_to='studies/protocols/')),
                ('additional_files', models.FileField(blank=True, help_text='Upload additional study documentation', null=True, upload_to='studies/additional/')),
                ('sample_size', models.PositiveIntegerField(blank=True, help_text='Approximate sample size (if known)', null=True)),
                ('study_period_start', models.DateField(blank=True, help_text='Study start date (optional)', null=True)),
                ('study_period_end', models.DateField(blank=True, help_text='Study end date (optional)', null=True)),
                ('geographic_scope', models.CharField(blank=True, help_text="Geographic scope (optional - e.g., 'Global', 'USA', 'Sub-Saharan Africa')", max_length=200)),
                ('status', models.CharField(choices=[('created', 'Created'), ('codebook_uploaded', 'Source Codebook Uploaded'), ('variables_extracted', 'Variables Extracted'), ('variables_mapped', 'Variables Mapped'), ('harmonised', 'Harmonised'), ('completed', 'Completed')], default='created', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='studies', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project that this study belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='studies', to='core.project')),
                ('variables', models.ManyToManyField(blank=True, help_text='Variables/attributes included in this study', related_name='studies', to='core.attribute')),
            ],
            options={
                'verbose_name_plural': 'Studies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('float_value', models.FloatField(blank=True, null=True)),
                ('int_value', models.IntegerField(blank=True, null=True)),
                ('text_value', models.TextField(blank=True)),
                ('boolean_value', models.BooleanField(blank=True, null=True)),
                ('datetime_value', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='core.attribute')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='core.location')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='core.patient')),
                ('time', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='observations', to='core.timedimension')),
            ],
            options={
                'unique_together': {('patient', 'location', 'attribute', 'time')},
            },
        ),
    ]
